{
	"name": "gold_df_hechos_ordenes",
	"properties": {
		"folder": {
			"name": "GOLD"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "silver_detalle_ventas",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "silver_productos",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "silver_clientes",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "gold_hechos_ordenes",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join2"
				},
				{
					"name": "cast1"
				},
				{
					"name": "aggregate1",
					"description": "AgregaciÃ³n de datos por \"numorder\" que genera las columnas \"productkey, custid, orderdt, shipdt, sales, quantity, price, idproduct, id, firstname\""
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          numorder as string,",
				"          productkey as string,",
				"          custid as integer,",
				"          orderdt as integer,",
				"          shipdt as integer,",
				"          sales as integer,",
				"          quantity as integer,",
				"          price as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT numorder,productkey,custid,orderdt,shipdt,sales,quantity,price FROM SILVER.DETALLE_VENTAS\\n',",
				"     format: 'query') ~> source1",
				"source(output(",
				"          idproduct as integer,",
				"          productkey as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT idproduct, productkey FROM SILVER.PRODUCTOS',",
				"     format: 'query') ~> source2",
				"source(output(",
				"          id as integer,",
				"          firstname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT id, firstname FROM SILVER.CLIENTES',",
				"     format: 'query') ~> source3",
				"source1, derivedColumn1 join(source1@productkey == derivedColumn1@productkey,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"cast1 derive(productkey = substring(productkey, 7)) ~> derivedColumn1",
				"join1, source3 join(custid == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"source2 cast(output(",
				"          idproduct as string",
				"     ),",
				"     errors: true) ~> cast1",
				"select1 aggregate(groupBy(numorder),",
				"     each(match(name != 'numorder'), $$ = first($$))) ~> aggregate1",
				"join2 select(mapColumn(",
				"          numorder,",
				"          productkey = source1@productkey,",
				"          custid,",
				"          orderdt,",
				"          shipdt,",
				"          sales,",
				"          quantity,",
				"          price,",
				"          idproduct,",
				"          id,",
				"          firstname",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ordenNum as string,",
				"          idCliente as integer,",
				"          idproduct as string,",
				"          quantity as integer,",
				"          price as integer,",
				"          sales as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'allErrors',",
				"     transactionCommit: 'single',",
				"     reportSuccessOnError: true,",
				"     mapColumn(",
				"          ordenNum = numorder,",
				"          idCliente = custid,",
				"          idproduct,",
				"          quantity,",
				"          price,",
				"          sales",
				"     )) ~> sink1"
			]
		}
	}
}